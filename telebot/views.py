import telepot
import time
from telepot.namedtuple import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telepot.loop import MessageLoop
from lib.models import Pouch, Staff
from calc.models import Transaction
from django.utils import timezone
from .models import AuthorizedUser, Schedule

TOKEN = '433011800:AAFWG5KsdK2mMyX-xx9MLeZbksaM82N2ZSU'
bot = telepot.Bot(TOKEN)

#–°–ª–æ–≤–∞—Ä—å –∏–∑ –≤—Ö–æ–¥—è—â–µ–≥–æ Json
def json_extractor(msg):
    return dict(msg)

#–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
def base_data(msg):
    content_type, chat_type, chat_id = telepot.glance(msg)
    data = {'content_type': content_type, 'chat_type': chat_type, 'chat_id': chat_id}
    return data

class Keyboard():
    def registration_key(self):
        key1 = [KeyboardButton(text='ü§ù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', request_contact=True)]
        keyboard = ReplyKeyboardMarkup(
                keyboard=[key1, ],
                resize_keyboard=True,
                one_time_keyboard=True,
                selective=True,
            )
        return keyboard

    def main_menu(self):
        key1 = [KeyboardButton(text='üí≥ –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–æ–≤')]
        key2 = [KeyboardButton(text='üóû –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')]
        key3 = [KeyboardButton(text='–ó–∞—è–≤–∫–∏')]
        keyboard =  ReplyKeyboardMarkup(
                    keyboard=[key1, key2, key3],
                    resize_keyboard=True
                )
        return keyboard



#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π –≤—Ö–æ–¥—è—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
def user_data_check(msg, user_data):
    if user_data in json_extractor(msg)['contact']:
        return json_extractor(msg)['contact'][user_data]

def user_creator(msg):
    try:
        if 'username' in json_extractor(msg)['from']:
            username = json_extractor(msg)['from']['username']
        else:
            username = None
        user_id = user_data_check(msg, 'user_id')
        telephone = user_data_check(msg, 'phone_number')
        firstname = user_data_check(msg, 'first_name')
        secondname = user_data_check(msg, 'last_name')
        user = AuthorizedUser.objects.create(
            firstname=firstname,
            secondname=secondname,
            user_name=username,
            user_id=user_id,
            telephone=telephone
        )
        message = 'ü§ù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        return (message, user)
    except:
        message = 'ü§ù –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
        return (message, None)

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def registration_control(msg):
    contact = json_extractor(msg)['contact']['user_id']
    sender = json_extractor(msg)['from']['id']
    return contact == sender

def registration(msg):
    content_type = base_data(msg)['content_type']
    chat_id = base_data(msg)['chat_id']
    if content_type == 'contact':
        if registration_control(msg):
            keys = Keyboard.main_menu(msg)
            message, user = user_creator(msg)
            bot.sendMessage(chat_id, message, reply_markup=keys)
            return (True, user)
        else:
            user = AuthorizedUser.objects.filter(user_id=chat_id)
            if user:
                message = 'ü§ù –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'
                bot.sendMessage(chat_id, message)
                return (None, None)
            else:
                message = '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á—É–∂–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑...'
                bot.sendMessage(chat_id, message)
                return (None, None)

def authorization(msg):
    chat_id = base_data(msg)['chat_id']
    user_id = json_extractor(msg)['from']['id']
    registration(msg)
    user = [x for x in AuthorizedUser.objects.filter(user_id=user_id).all()]

    if user:
        return (True, user[0])

    else:
        keys = Keyboard.registration_key(msg)
        message = '–ü—Ä–∏–≤–µ—Ç, –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
        bot.sendMessage(chat_id, message, reply_markup=keys)
        return (False, None)

def authentication(msg):
    chat_id = base_data(msg)['chat_id']

    if authorization(msg)[0]:
        user = authorization(msg)[1]
        phone = user.telephone
        staff = [x for x in Staff.objects.filter(telephone=phone).all()]

        if staff:
            return (True, staff[0])

        else:
            message = "–£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            bot.sendMessage(chat_id, message)
            return (False, None)

def get_user_pouches(user):
    staff = user.pouches.all()
    staff_pouches = [x.id for x in staff]
    return staff_pouches

def get_schedule_list(user):
    list_schedule = Schedule.objects.filter(accepted=False)
    return list_schedule

def bot_body(msg):
    content_type, chat_type, chat_id = telepot.glance(msg)
    print(content_type, chat_type, chat_id)
    print(dict(msg))
    if authorization(msg)[0]:
        if content_type == 'text' and msg['text'] == '/start':
            keys = Keyboard.main_menu(msg)
            bot.sendMessage(chat_id, '–í—ã –≤ —Å–∏—Å—Ç–µ–º–µ', reply_markup=keys)
            if authentication(msg)[0]:
                keys = Keyboard.main_menu(msg)
                bot.sendMessage(chat_id,'–ö–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º', reply_markup=keys)

        elif content_type == 'text' and msg['text'] == 'üí≥ –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–æ–≤':
            result, user = authentication(msg)
            if result:
                #–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                staff_pouches = get_user_pouches(user)
                pouch = Pouch.objects.filter(id__in=staff_pouches)
                for x in pouch:
                    message = '%s = %s' % (x.name, x.balance)
                    bot.sendMessage(chat_id, message)
        elif content_type == 'text' and msg['text'] == 'üóû –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏':
            result, user = authentication(msg)
            if result:
                staff_pouches = get_user_pouches(user)
                transaction = Transaction.objects.filter(money__in=staff_pouches).order_by('-date')[:5]
                message = '–°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: –î–∞—Ç–∞: —Å—É–º–º–∞ —Å—á–µ—Ç/—Ç–∏–ø - –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
                bot.sendMessage(chat_id, message)
                for x in transaction:
                    if x.typeof:
                        type = '–ü—Ä–∏—Ö–æ–¥'
                    else:
                        type = '–†–∞—Å—Ö–æ–¥'
                    message = '%s : %d %s/%s - %s' % (
                        x.date.strftime("%d-%m"),
                        x.sum_val,
                        x.money,
                        type,
                        x.category,
                    )
                    bot.sendMessage(chat_id, message)

        elif content_type == 'text' and msg['text'] == '–ó–∞—è–≤–∫–∏':
            list_schedule = get_schedule_list(1)
            message = '–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫'
            bot.sendMessage(chat_id, message)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data='accept')],
                ])
            for x in list_schedule:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å', callback_data=str(x.id))],
                ])
                message = '%s - –î–∞—Ç–∞ –ø–æ–¥–∞—á–∏ %s' % (
                    x.name,
                    x.date_start,
                )

                bot.sendMessage(chat_id, message, reply_markup=keyboard)


def on_callback_query(msg):
    query_id, from_id, query_data = telepot.glance(msg, flavor='callback_query')
    print('Callback Query:', query_id, from_id, query_data)
    title = Schedule.objects.get(id=int(query_data))
    user = AuthorizedUser.objects.get(user_id=int(from_id))
    staff = Staff.objects.get(telephone=user.telephone)
    title.master = staff
    title.date_accept = timezone.now()
    title.accepted = True
    title.save()

    bot.answerCallbackQuery(query_id, text='–ü–†–ò–ù–Ø–¢–ê')


def personal_bot(msg):
    chat_type = base_data(msg)['chat_type']
    chat_id = base_data(msg)['chat_id']
    if chat_type == 'private':
        bot_body(msg)
    else:
        message = '–Ø –Ω–µ –±—É–¥—É —Å –í–∞–º–∏ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å –ø—Ä–∏ –≤—Å–µ—Ö, —Ç–æ–ª—å–∫–æ —Å –≥–ª–∞–∑—É –Ω–∞ –≥–ª–∞–∑.'
        bot.sendMessage(chat_id, message)

def run_bot(request):
    MessageLoop(bot, {'chat': personal_bot, 'callback_query': on_callback_query} ).run_as_thread()
    print('–°–ª—É—à–∞—é...')

    while 1:
        time.sleep(10)